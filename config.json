const { app, BrowserWindow, Tray, Menu, screen, dialog, nativeImage } = require('electron');
const path = require('path');
const fs = require('fs');

let win;
let tray;
let config = {};

const configPath = path.join(app.getPath('userData'), 'config.json');

function loadConfig() {
    try {
        if (fs.existsSync(configPath)) {
            const configData = fs.readFileSync(configPath, 'utf8');
            return JSON.parse(configData);
        }
    } catch (error) {
        console.error('Error loading config:', error);
    }
    return {};
}

function saveConfig(newConfig) {
    try {
        config = { ...config, ...newConfig };
        fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
    } catch (error) {
        console.error('Error saving config:', error);
    }
}

function createTrayIcon() {
    const image = nativeImage.createFromPath(path.join(__dirname, 'Nuro-Icon2.ico'));
    return image.resize({ width: 16, height: 16 });
}

function showConnectionError() {
    dialog.showMessageBoxSync({
        type: 'error',
        title: 'Ошибка подключения',
        message: 'Сервис временно недоступен',
        detail: 'Приносим извинения за неудобства. Пожалуйста, повторите попытку позже.',
        buttons: ['Ок'],
        defaultId: 0,
        noLink: true
    });
    
    app.isQuitting = true;
    app.quit();
}

function setAutoLaunch(value) {
    app.setLoginItemSettings({
        openAtLogin: value,
        path: app.getPath('exe')
    });
    saveConfig({ runAtStartup: value });
}

function createWindow() {
    config = loadConfig();
    const savedBounds = config.windowBounds || {};

    const cursorPoint = screen.getCursorScreenPoint();
    const display = screen.getDisplayNearestPoint(cursorPoint);
    const { workArea } = display;
    
    const width = savedBounds.width || 800;
    const height = savedBounds.height || 600;
    
    const winX = savedBounds.x || workArea.x + Math.max(0, (workArea.width - width) / 2);
    const winY = savedBounds.y || workArea.y + Math.max(0, (workArea.height - height) / 2);

    win = new BrowserWindow({
        width: width,
        height: height,
        x: winX,
        y: winY,
        autoHideMenuBar: true,
        icon: path.join(__dirname, 'NuroIcon.ico'),
        webPreferences: {
            nodeIntegration: false,
            contextIsolation: true
        },
        show: false,
        opacity: 0,
        minWidth: 400,
        minHeight: 600
    });

    if (config.isFullScreen) {
        win.setFullScreen(true);
    }
    
    if (config.isAlwaysOnTop) {
        win.setAlwaysOnTop(true);
    }

    win.loadURL("https://regime-avoiding-navy-resorts.trycloudflare.com
");

    win.webContents.on("did-finish-load", () => {
        win.webContents.insertCSS(`
            html, body {
                overflow: hidden !important;
                overscroll-behavior: none !important;
            }
        `);
        
        win.show();
        let opacity = 0;
        const fadeInInterval = setInterval(() => {
            opacity += 0.04;
            win.setOpacity(opacity);
            
            if (opacity >= 1) {
                clearInterval(fadeInInterval);
                win.focus();
            }
        }, 30);
    });

    win.webContents.on('did-fail-load', () => {
        showConnectionError();
    });

    win.on("close", (event) => {
        if (!app.isQuitting) {
            event.preventDefault();
            win.hide();
        }
    });

    win.on('resize', () => {
        if (win && !win.isDestroyed() && !win.isMaximized() && !win.isMinimized() && !win.isFullScreen()) {
            const bounds = win.getBounds();
            saveConfig({ windowBounds: bounds });
        }
    });

    win.on('move', () => {
        if (win && !win.isDestroyed() && !win.isMaximized() && !win.isMinimized() && !win.isFullScreen()) {
            const bounds = win.getBounds();
            saveConfig({ windowBounds: bounds });
        }
    });

    win.on('enter-full-screen', () => {
        saveConfig({ isFullScreen: true });
    });

    win.on('leave-full-screen', () => {
        saveConfig({ isFullScreen: false });
    });
}

function createTray() {
    if (tray) {
        tray.destroy();
    }

    tray = new Tray(createTrayIcon());

    const contextMenu = Menu.buildFromTemplate([
        {
            label: 'Запускать при запуске системы',
            type: 'checkbox',
            checked: config.runAtStartup || false,
            click: (menuItem) => {
                setAutoLaunch(menuItem.checked);
            }
        },
        {
            label: 'Поверх окон',
            type: 'checkbox',
            checked: config.isAlwaysOnTop || false,
            click: () => {
                toggleAlwaysOnTop();
            }
        },
        {
            label: 'Выйти',
            click: () => {
                app.isQuitting = true;
                app.quit();
            }
        }
    ]);

    tray.setToolTip('Nuro');
    tray.setContextMenu(contextMenu);

    tray.on('click', () => {
        toggleWindowVisibility();
    });
}

function toggleAlwaysOnTop() {
    const newValue = !config.isAlwaysOnTop;
    saveConfig({ isAlwaysOnTop: newValue });
    
    if (win && !win.isDestroyed()) {
        win.setAlwaysOnTop(newValue);
    }
    
    updateTrayMenu();
}

function updateTrayMenu() {
    const contextMenu = Menu.buildFromTemplate([
        {
            label: 'Запускать при запуске системы',
            type: 'checkbox',
            checked: config.runAtStartup || false,
            click: (menuItem) => {
                setAutoLaunch(menuItem.checked);
            }
        },
        {
            label: 'Поверх окон',
            type: 'checkbox',
            checked: config.isAlwaysOnTop || false,
            click: () => {
                toggleAlwaysOnTop();
            }
        },
        {
            label: 'Выйти',
            click: () => {
                app.isQuitting = true;
                app.quit();
            }
        }
    ]);

    tray.setContextMenu(contextMenu);
}

function showWindow() {
    if (win) {
        if (win.isDestroyed()) {
            createWindow();
            return;
        }
        
        const cursorPoint = screen.getCursorScreenPoint();
        const display = screen.getDisplayNearestPoint(cursorPoint);
        const { workArea } = display;
        
        const winBounds = win.getBounds();
        const maxWidth = Math.min(winBounds.width, workArea.width - 40);
        const maxHeight = Math.min(winBounds.height, workArea.height - 40);
        
        const winX = workArea.x + Math.max(0, (workArea.width - maxWidth) / 2);
        const winY = workArea.y + Math.max(0, (workArea.height - maxHeight) / 2);
        
        win.setBounds({
            x: winX,
            y: winY,
            width: maxWidth,
            height: maxHeight
        });
        
        win.show();
        win.focus();
    } else {
        createWindow();
    }
}

function toggleWindowVisibility() {
    if (win && !win.isDestroyed() && win.isVisible()) {
        win.hide();
    } else {
        showWindow();
    }
}

const gotTheLock = app.requestSingleInstanceLock();

if (!gotTheLock) {
    app.quit();
} else {
    app.on('second-instance', () => {
        showWindow();
    });
}

app.whenReady().then(() => {
    config = loadConfig();
    if (config.runAtStartup) {
        setAutoLaunch(true);
    }
    
    createWindow();
    createTray();
});

app.on("window-all-closed", (event) => {
    event.preventDefault();
});

app.on('before-quit', () => {
    app.isQuitting = true;
    
    if (win && !win.isDestroyed()) {
        const bounds = win.getBounds();
        saveConfig({ windowBounds: bounds });
    }
});
